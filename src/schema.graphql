# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from "./generated/prisma.graphql"

type Query {
    posts(query: String, first: Int, skip: Int, after: String, orderBy:PostOrderByInput):[Post!]!
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy:PostOrderByInput):[Post!]!
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
    me: User
    post(id: ID!): Post
}

type Mutation {
    login(data: loginInput!): AuthPayload!
    createUser(data: createUserInput): AuthPayload!
    deleteUser: User!
    updateUser(data: updateUserInput): User!
    createPost(data: createPostInput):Post!
    deletePost(id: ID!): Post!
    deleteAllPosts: PostsQty!
    updatePost(id: ID!, data: updatePostInput): Post!
    createComment(data: createCommentInput):Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: updateCommentInput): Comment!
}

type Subscription {
    count: Int!
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}
type PostsQty {
    count: Int!
}
input loginInput {
    email: String!
    password: String!
}

input createCommentInput {
    text: String!
    post: ID!
}

input updateCommentInput {
    text: String
}

input createUserInput {
    name: String!
    email: String!
    password: String!
}

input updateUserInput {
    name: String
    email: String
    password: String
}

input createPostInput {
    title: String!
    body: String!
    published: Boolean!
}

input updatePostInput {
    title: String
    body: String
    published: Boolean

}

type AuthPayload {
    token: String!
    user: User!
}

type User {
    id: ID!
    name: String!
    email: String
    posts: [Post!]!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Comment {
    id: ID!,
    text: String!
    author: User!
    post: Post!
    updatedAt: String!
    createdAt: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}

